.TH _printf - Linux man page

.SH Name
.B _printf

.SH SYNOPSIS
.B #include <"holberton.h">

.B int _printf(const char *format...)

.SH DESCRIPTION
The function produce output according to a format as described below. 

.SH Return Value
Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).

.SH Format of the format string
The format string is a character string, beginning and ending in its initial shift state, if any. The format string is composed of zero or more directives: ordinary characters (not %), which are copied unchanged to the output stream; and conversion specifications, each of which results in fetching zero or more subsequent arguments. Each conversion specification is introduced by the character %, and ends with a conversion specifier. In between there may be (in this order) zero or more flags, an optional minimum field width, an optional precision and an optional length modifier.

.SH The conversion specifier
A character that specifies the type of conversion to be applied. The conversion specifiers and their meanings are:

.SH d, i
The int argument is converted to signed decimal notation. 

.SH b
The unsigned int argument is converted to unsigned binary notation. 

.SH o, u, x, X
The unsigned int argument is converted to unsigned octal (o), unsigned decimal (u), or unsigned hexadecimal (x and X) notation. The letters abcdef are used for x conversions; the letters ABCDEF are used for X conversions. 
.SH c

If no l modifier is present, the int argument is converted to an unsigned char, and the resulting character is written. If an l modifier is present, the wint_t (wide character) argument is converted to a multibyte sequence by a call to the wcrtomb(3) function, with a conversion state starting in the initial state, and the resulting multibyte string is written.

.SH s

If no l modifier is present: The const char * argument is expected to be a pointer to an array of character type (pointer to a string). Characters from the array are written up to (but not including) a terminating null byte ('\0'); if a precision is specified, no more than the number specified are written. If a precision is given, no null byte need be present; if the precision is not specified, or is greater than the size of the array, the array must contain a terminating null byte.

.SH S

Non printable characters (0 < ASCII value < 32 or >= 127) are printed this way: \x, followed by the ASCII code value in hexadecimal (upper case - always 2 characters)

.SH %

A '%' is written. No argument is converted. The complete conversion specification is '%%'.

.SH r

If no l modifier is present: Takes an input string (char array), removes terminating null byte, reverses the string, adds a terminating null byte, and writes result to standard output

.SH R

If no l modifier is present: Takes an input string (char array), iterates through string, rotating all letters by 13 places while maintaining their case (an ancient form of encryption), does not modify other types of characters, and writes the result to standard output.